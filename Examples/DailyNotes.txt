Language:
=========
			Communication

Programming Language:
=====================
			Communication with machines
			
			POP            			  OOP	OMG
	B,BCPL,COBOL,PHOTON,C..			Java,C++,Python,.net......		
	
	
					Performance  	Inheritance,Polymorphisam
					Security		Abstraction,Encapsulation
	
			
					python oopl/oops
					
Python:
=======


	welcome to india


	java			2014 java8
	=====				James Gosling		1995
	class Welcome
	{
		int age=30;//static typed programming
	public static void main(String args[])		19
	{
	System.out.println("welcome to india");
	}
	}
	
	Python:				guido van rossum     1991 feb 20th
	========
	print("welcome to india");
	
	
	1.x
	2.x
	3.x
	
		functional programming from C
		Object oriented  from C++
		scripting lang features from shellscript
		modular programming from Modula-3


		syntax derived from C,ABC 


Types of Applications:
=====================
1)Desktop applications 		 media player,anti virus
2)web applications				gmail,fb,insta....URL
3)db applications
4)network programming applications
5)gaming applications
6)Data Analysis 
7)machine learning
8)AI
9)IOT ......

DJango,flask,pdbc

Features:
==========
1)simple

2)free source and open source 

3) high level pl  

4)Platform Independent  WORA

5)portability

6)dynamic typed   a=29;		int age=29;

7)oop

8)interpreted		PVM  

9)Extensible	

10)rich library


cpython

Jython

ironpython


Identifiers:
============
		

			name='accenture';

		a-z
		A-Z
		0-9
		 _

	age=29;
	
InBuilt Functions:
=====================
print("welcome to python")
input("used to take input from end user ")-->str
int()
float()
bool()
type()
id()
complex()
frozenset()
	append()-->list
	add()	-->set
remove()	-->l/s
	
Reserved Words
to know python 33  keywords list

>>> import keyword
>>> keyword.kwlist
['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 
'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda',
 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']

Datatypes:
==========

1)int
2)float
3)str
4)bool
5)complex   immutable
6)bytes
7)range
8)List
9)Tuple
10)Set
11)FrozenSet
12)Dict
13)None


type()
id() address
print()
a=123;
a=234;
print(a)....>




>>> print('welcome to python')
welcome to python
>>> a=123
>>> print(a)
123
>>> name123='sandeep'
>>> print(name123)
sandeep

>>> type(id1)
<class 'int'>
>>> type(org_name)
<class 'str'>
>>> salary=22.5
>>> type(salary)
<class 'float'>
>>> result=true
>>> a=5+2j
>>> type(a)
<class 'complex'>

>>> orgname='accenture'
>>> type(orgname)
<class 'str'>
>>> orgname[0]
'a'
>>> orgname[-1]
'e'
>>> orgname[0:6]
'accent'
>>> orgname[0:5]
'accen'
>>> orgname[:8]
'accentur'
>>> orgname[2:8]
'centur'
>>> len(orgname)
9
 print(salary)
22.5
>>> type(salary)
<class 'float'>
>>> int(salary)
22
>>> marks=234.67
>>> type(marks)
<class 'float'>
>>> marks=234
>>> type(marks)
<class 'int'>
>>> float(marks)
234.0
>>> result='True'
>>> type(result)
<class 'str'>
>>> bool(result)
True
>>> r=range(10,20,2)
>>> for i in r:print(i)
List:
======
	if we want to store
	group of values as a single entity where insertion order is preserved and duplicates are allowed


		1)duplicates are allowed
		2)insertion order is followed
		3)Both Homogeneous and Heterogeneous
		4)growable in nature
		5)[]
		6)muttable
>>> names=['sandeep','mahesh','suresh','rajesh']
>>> type(names)

Tuple
=====
		1)duplicates are allowed
		2)insertion order is followed
		3)Both Homogeneous and Heterogeneous
		4)growable in nature
		5)() 
		6)imuttable

>>> employees=('sandeep','mahesh','suresh','rajesh')
>>> type(employees)
>>> employees[0]='few are sleeping'
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'tuple' object does not support item assignment
>>> employees.append('accenture')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'tuple' object has no attribute 'append'

range:
	dt is sequence of numbers and immutable

	range(10)


exit()




Set:
======
	if we want to store
	group of values as a single entity where with out insertion order and duplicates 


		1)duplicates are not allowed
		2)insertion order is not preserved / followed
		3)Both Homogeneous and Heterogeneous allowed
		4)growable in nature
		5){}
		6)muttable
		7)index not applicable
		
>>> names={'sandeep','mahesh','suresh','rajesh','mahesh'}
>>> type(names)
<class 'set'>
>>> print(names)
{'sandeep', 'suresh', 'rajesh', 'mahesh'}
>>> print(names[0])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'set' object is not subscriptable
>>> print(names.add(789))
None
>>> print(names)
{'rajesh', 'mahesh', 'sandeep', 'suresh', 789}
>>> names.remove('suresh');
>>> print(names)
{'rajesh', 'mahesh', 'sandeep', 789}




FrozenSet
=========
		if we want to store
	group of values as a single entity where with out insertion order and duplicates 


		1)duplicates are not allowed
		2)insertion order is not preserved / followed
		3)Both Homogeneous and Heterogeneous allowed
		4)growable in nature
		5) frozenset({})
		6)imuttable
		7)index not applicable
		
Dict:
=====
	if we want to store	group of values as a key-value 

	dict={1:'sandeep',2:'mahesh',3:'rajesh',1:'somesh'}

		1)duplicate keys are not allowed but values can be duplicated 

		2)dict is mutable and the order won't be preserved 


Funtions




	a block/unit of statements         --> function
	
	the group/collection of functions   --> module
 
	the group/collection of modules     --> library




	2 types functions
	
		1)inbuilt/predefined functions
		
		2)user defined functions
	 


	def functionname(parameters):
		.
		.
		.
		return value;


	def sayHello():
		print("Hello! How r  u..")

	sayHello()//code reusability
	

	
parameters/arguments


Lamda Functions

	filter
	map
	reduce
	isalpha
	


Module:
-------
* group of functions,variables,classes saved into a file which is  module

* every py file is module


OOP's Features:
==============

					Performance  	Inheritance,Polymorphisam
					Security		Abstraction,Encapsulation


	class:
	======

	collection fo data members and member functions


	logical exsistence
	physical exsistence

car  	audi car,toyoto car,huyndai
tree	


	Object 
	
		class Welcome:
			""" """
			variables
			methods/functions
			
Types of variables
	
		
1)instance variables				object level variable	
2)static variables//global variable class level variables
3)local variable



class ,object

instance properties will get memory space when you create the object

Employee

emp=Employee(); object instance properties

constructor 			__init__


def __init__(self)





Instance Variables:
=================== eid,ename,email,aadhar,
	will get memory space when we create object
	
	inside constructor/method by using self 
	
	outside the class by using obj reference


Static Variables:
===================orgname,country,school,clgname 
	will get memory space only once
	
	outside constructor/method
	
	outside the class by using classname or obj reference


Types of methods

1)instance method					
2)class method				 
3)static method



Inheritance:  Code Reusability
============


class Calculator


	30 methods


class Myclass(Calculator)		

	20 methods
	
 with excpetion handling					 with out excpetion handling

user friendly error message 				system defined error messages will come
normal termination							abnormal termination


1
2  thorow error		 abnormal termination


					 normal termination 	

1000





Csv


ZIpping and unzipping


Pickling and unpickling



	Employee
	
	
	
	obj=Employee(123,"sandeep",2000,"hyd");    file  pickling
	
	    file  Obj 									un-pickling

Regular Expressions:
====================
a group chars with particulat format /pattern


	compile() -->used to compile a pattern into regexobj
			pattern=re.compile("ab")
	finditer()
		matcher=pattern.finditer("abaaabbaab")
	start()-->returns start index of the match
	
	end()--->returns end+1 index of the match
	
	group()-->returns the matched string


import re 
count =0
pattern=re.compile("ab")
matcher=pattern.finditer("abaababa")
for match in matcher:
	count+=1
	print(match.start(),".....",match.end(),"...",match.group())#0...2..ab
																#3...5..ab	
																#5...7..ab
														











